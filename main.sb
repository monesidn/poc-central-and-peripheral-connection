#include "./util.sb"
dim testKey
testKey = NvCfgKeyGet(213, testKey)
if testKey != 1 then
    rc = NvCfgKeySet(211, 247)
    assertZero(rc, "MA001")
    rc = NvCfgKeySet(212, 244)
    assertZero(rc, "MA002")
    rc = NvCfgKeySet(216, 251)
    assertZero(rc, "MA003")
    rc = NvCfgKeySet(213, 1) 
    assertZero(rc, "MA004")
endif 

#include "./gatt.sb"
#include "./device-info.sb"

#include "./gatt-setup.sb"
#include "./advert.sb"
#include "./sensor.sb"
#include "./messages.sb"

dim notifySubscribed
notifySubscribed = false

dim counter 
counter = 0

dim centralConnHand
centralConnHand = -1

sub InitGapService()
    dim name$
    name$ = DEVICE_NAME
    rc = BleGapSvcInit(name$, DEVICE_NAME_WRITABLE, APPEARANCE, MIN_CONN_INTERVAL, MAX_CONN_INTERVAL, CONN_SUP_TIMEOUT, SLAVE_LATENCY)
    assertZero(rc, "MA010")
endsub

function onCCCDWrite(byval handle, byval value)
    if handle == handNotChar then
        Print "Notify subscription has changed. New value: ";value;"\n"
        notifySubscribed = value
    endif
endfunc 1

function handlerTimer0()
    if notifySubscribed then
        counter = counter + 1
        Print "Going to notify value ";counter;"\n"
        dim data$ 
        rc = BleEncode32(data$, counter, 0)
        assertZero(rc, "MA020")

        rc = BleCharValueNotify(handNotChar, data$)
        if rc == 0 then
            Print "Notification succeeded";"\n"
        else 
            Print "Notification failed with error ";INTEGER.H'rc;"\n"
        endif 
    endif
endfunc 1

function handlerTimer1()
    Print "Will now disconnect the sensor.";"\n"
    disconnectHr()
endfunc 1

function onBleMsg(byval msgId, byval ctx) 
    select msgId
        case BLE_EVBLEMSGID_CONNECT
            if connectingHr then
                rc = SendMsgApp(APP_MSG_CONNECTION_TO_SENSOR_ESTABLISHED, ctx)
            else 
                rc = SendMsgApp(APP_MSG_CONNECTION_TO_CENTRAL_ESTABLISHED, ctx)
            endif

        case BLE_EVBLEMSGID_DISCONNECT
            if hrConnHand == ctx then
                Print "HR Sensor disconnected\n"
                hrConnHand = -1
            elseif centralConnHand == ctx then
                Print "Central device disconnected. Stopping\n"
                STOP
            else 
                Print "Unknown connection disconnected. Stopping\n"
                STOP
            endif

        case else
    endselect
endfunc 1

function handlerMsgApp(byval msgId as integer, byval msgCtx as integer) as integer
    select msgId
        case APP_MSG_CONNECTION_TO_SENSOR_ESTABLISHED
            onConnect(msgCtx)
            Print "Sensor connected. Starting advertisment\n"
            AdvertStart()

        case APP_MSG_CONNECTION_TO_CENTRAL_ESTABLISHED
            centralConnHand = msgCtx
            Print "Central device connected. Starting notifications\n"
            Print "Will disconnect sensor in 10 seconds\n"
            TimerStart(1,10000,0)
            TimerStart(0,1000,1)

        case else
    endselect
endfunc 1


InitGatt()
InitGapService()
connectToSensor()

// Sends notifications to central if it is connected and notifications are enabled.
onevent EVTMR0 call handlerTimer0

// Disconnects the sensor
onevent EVTMR1 call handlerTimer1

ONEVENT EVMSGAPP CALL handlerMsgApp
onevent EVBLEMSG call onBleMsg
onevent EVCHARCCCD call onCCCDWrite
waitevent